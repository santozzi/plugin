package Logica;import java.io.File;import java.io.IOException;import java.util.*;import java.util.logging.ConsoleHandler;import java.util.logging.Handler;import java.util.logging.Level;import java.util.logging.Logger;import Observer.Observado;import Observer.Observador;/** * CalculadoraSimple * Se encarga de revisar si hay plugins con extensión .jar o .class en un directorio determinado * Este código esta basado en el articulo "Adding Plugins to a Java Application" by Ulf Dittmer * https://javaranch.com/journal/200607/Plugins.html * */public class CalculadoraSimple implements Observado {	//>--Directorio donde se guardan los plugins------------	protected String pluginsDir;	//>--Lista de observadores------------------------------	protected List<Observador> listaDeObservadores;	protected ClassLoader cl;	//>--Extensiones permitidas------------------------------	public static final String EXTENSION= ".jar";	public static final String EXTENSION_SECUNDARIA=".class";	//>--Logger para indicar si la solución es válida o no al administrador del programa----<	private static Logger Logger;	//>--Lista de plugins encontrados------------------------	protected List<PluginFunction> plugins;	@SuppressWarnings("static-access")	/**	 * CalculadoraSimple	 * Inicializo variables y Logger	 */	public CalculadoraSimple () {		if(Logger==null) {			Logger = Logger.getLogger(CalculadoraSimple.class.getName());			Handler hnd = new ConsoleHandler();			hnd.setLevel(Level.FINE);			Logger.addHandler(hnd);			Logger.setLevel(Level.FINE);			Logger rootLogger = Logger.getParent();			for(Handler h: rootLogger.getHandlers()) {				h.setLevel(Level.OFF);			}		}		listaDeObservadores = new LinkedList<Observador>();		pluginsDir = "plugins";		plugins = new ArrayList<PluginFunction>();	}	/**	 * getPlugins	 * Revisa en el directorio seleccionado si hay plugins, y de haber los notifica, e 	 * inicaliza al mirador. Un hilo secundario que esta pendiente de los cambios	 * en el directorio	 * @throws IOException si la ruta no existe	 * 	 */	public void getPlugins() throws IOException {				File dir = new File(System.getProperty("user.dir") + File.separator + pluginsDir);		//mirador	  /*		if(!dir.exists())	        throw new IOException("La ruta "+System.getProperty("user.dir") + File.separator + pluginsDir+" es invalida");	    */		FileChangeWatcher mirarDir = new FileChangeWatcher(this);	   			mirarDir.doWath(dir.toString());			mirarDir.start();			//--------		cl = new PluginClassLoader(dir);		if (dir.exists() && dir.isDirectory()) {			String[] files = dir.list();			plugins.clear();			for (int i=0; i<files.length; i++) {				if (files[i].endsWith(EXTENSION)||files[i].endsWith(EXTENSION_SECUNDARIA)) {					notificarAddItem(files[i]);				}			}		}	}	/**	 * recolectarObjeto	 * Recibe una ruta de un archivo y la captura en un PluginFunction	 * @param archivo ruta del archivo de tipo String	 * @return Un plugin de tipo PluginFunction	 */	private PluginFunction recolectarObjeto(String archivo) {		PluginFunction resultado= null;		try {			if (archivo.endsWith(EXTENSION)||archivo.endsWith(EXTENSION_SECUNDARIA)) {				Class c = cl.loadClass(archivo.substring(0, archivo.indexOf(".")));				Class[] intf = c.getInterfaces();				for (int j=0; j<intf.length; j++) {					if (intf[j].getName().equals("Logica.PluginFunction")) {						PluginFunction pf = (PluginFunction) c.newInstance();						plugins.add(pf);						resultado= pf;						continue;					}				}			}		} catch (Exception ex) {			System.err.println("File " + archivo + " does not contain a valid PluginFunction class.");		}		return resultado;	}		//--------------observers----------------------------------	@Override	public void agregarObservador(Observador obs) {		listaDeObservadores.add(obs);		Logger.fine("Se agrego un nuevo obervador: "+obs.getClass().getSimpleName());	}	@Override	public void eliminarObservador(Observador obs) {		listaDeObservadores.remove(obs);	}	@Override	public void notificarAddItem(String item) {		Logger.fine("Agregando item "+item);		PluginFunction objeto = recolectarObjeto(item);		if(objeto!=null) {			for(Observador ob: listaDeObservadores) {				ob.updateListaAdd(objeto);			}		}	}/*	@Override	public void notificarCarga(String descripcion) {		for(Observador obs : listaDeObservadores) {			obs.updateCarga(descripcion);		}	}*/	@Override	public void notificarRemItem(String item) {		Logger.fine("Eliminando item "+item);		PluginFunction objeto = null;		for(PluginFunction plugin : plugins) {			if((plugin.getPluginName()+EXTENSION).equals(item)||(plugin.getPluginName()+EXTENSION_SECUNDARIA).equals(item)) {				objeto= plugin;			}		}		if(objeto!=null) {			for(Observador ob: listaDeObservadores) {				ob.updateListaRem(objeto);			}		}	}	//----------------------------------------------------------------}